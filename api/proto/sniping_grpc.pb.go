// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/sniping.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SnipingService_ProcessTransaction_FullMethodName       = "/api.sniping.v1.SnipingService/ProcessTransaction"
	SnipingService_ProcessMeteoraEvent_FullMethodName      = "/api.sniping.v1.SnipingService/ProcessMeteoraEvent"
	SnipingService_GetTransactionHistory_FullMethodName    = "/api.sniping.v1.SnipingService/GetTransactionHistory"
	SnipingService_GetMeteoraPoolHistory_FullMethodName    = "/api.sniping.v1.SnipingService/GetMeteoraPoolHistory"
	SnipingService_SubscribeToTransactions_FullMethodName  = "/api.sniping.v1.SnipingService/SubscribeToTransactions"
	SnipingService_SubscribeToMeteoraEvents_FullMethodName = "/api.sniping.v1.SnipingService/SubscribeToMeteoraEvents"
	SnipingService_GetHealthStatus_FullMethodName          = "/api.sniping.v1.SnipingService/GetHealthStatus"
)

// SnipingServiceClient is the client API for SnipingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SnipingService handles requests related to sniping operations
type SnipingServiceClient interface {
	// ProcessTransaction handles incoming transaction data from the scanner
	ProcessTransaction(ctx context.Context, in *ProcessTransactionRequest, opts ...grpc.CallOption) (*ProcessTransactionResponse, error)
	// ProcessMeteoraEvent handles incoming Meteora pool events from the scanner
	ProcessMeteoraEvent(ctx context.Context, in *ProcessMeteoraEventRequest, opts ...grpc.CallOption) (*ProcessMeteoraEventResponse, error)
	// GetTransactionHistory retrieves historical transaction data
	GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error)
	// GetMeteoraPoolHistory retrieves historical Meteora pool data
	GetMeteoraPoolHistory(ctx context.Context, in *GetMeteoraPoolHistoryRequest, opts ...grpc.CallOption) (*GetMeteoraPoolHistoryResponse, error)
	// SubscribeToTransactions provides a stream of real-time transactions
	SubscribeToTransactions(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionEvent], error)
	// SubscribeToMeteoraEvents provides a stream of real-time Meteora events
	SubscribeToMeteoraEvents(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MeteoraEvent], error)
	// GetHealthStatus returns the health status of the service
	GetHealthStatus(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type snipingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnipingServiceClient(cc grpc.ClientConnInterface) SnipingServiceClient {
	return &snipingServiceClient{cc}
}

func (c *snipingServiceClient) ProcessTransaction(ctx context.Context, in *ProcessTransactionRequest, opts ...grpc.CallOption) (*ProcessTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessTransactionResponse)
	err := c.cc.Invoke(ctx, SnipingService_ProcessTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipingServiceClient) ProcessMeteoraEvent(ctx context.Context, in *ProcessMeteoraEventRequest, opts ...grpc.CallOption) (*ProcessMeteoraEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessMeteoraEventResponse)
	err := c.cc.Invoke(ctx, SnipingService_ProcessMeteoraEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipingServiceClient) GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionHistoryResponse)
	err := c.cc.Invoke(ctx, SnipingService_GetTransactionHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipingServiceClient) GetMeteoraPoolHistory(ctx context.Context, in *GetMeteoraPoolHistoryRequest, opts ...grpc.CallOption) (*GetMeteoraPoolHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMeteoraPoolHistoryResponse)
	err := c.cc.Invoke(ctx, SnipingService_GetMeteoraPoolHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipingServiceClient) SubscribeToTransactions(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SnipingService_ServiceDesc.Streams[0], SnipingService_SubscribeToTransactions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, TransactionEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SnipingService_SubscribeToTransactionsClient = grpc.ServerStreamingClient[TransactionEvent]

func (c *snipingServiceClient) SubscribeToMeteoraEvents(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MeteoraEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SnipingService_ServiceDesc.Streams[1], SnipingService_SubscribeToMeteoraEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, MeteoraEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SnipingService_SubscribeToMeteoraEventsClient = grpc.ServerStreamingClient[MeteoraEvent]

func (c *snipingServiceClient) GetHealthStatus(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, SnipingService_GetHealthStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnipingServiceServer is the server API for SnipingService service.
// All implementations must embed UnimplementedSnipingServiceServer
// for forward compatibility.
//
// SnipingService handles requests related to sniping operations
type SnipingServiceServer interface {
	// ProcessTransaction handles incoming transaction data from the scanner
	ProcessTransaction(context.Context, *ProcessTransactionRequest) (*ProcessTransactionResponse, error)
	// ProcessMeteoraEvent handles incoming Meteora pool events from the scanner
	ProcessMeteoraEvent(context.Context, *ProcessMeteoraEventRequest) (*ProcessMeteoraEventResponse, error)
	// GetTransactionHistory retrieves historical transaction data
	GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error)
	// GetMeteoraPoolHistory retrieves historical Meteora pool data
	GetMeteoraPoolHistory(context.Context, *GetMeteoraPoolHistoryRequest) (*GetMeteoraPoolHistoryResponse, error)
	// SubscribeToTransactions provides a stream of real-time transactions
	SubscribeToTransactions(*SubscribeRequest, grpc.ServerStreamingServer[TransactionEvent]) error
	// SubscribeToMeteoraEvents provides a stream of real-time Meteora events
	SubscribeToMeteoraEvents(*SubscribeRequest, grpc.ServerStreamingServer[MeteoraEvent]) error
	// GetHealthStatus returns the health status of the service
	GetHealthStatus(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedSnipingServiceServer()
}

// UnimplementedSnipingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSnipingServiceServer struct{}

func (UnimplementedSnipingServiceServer) ProcessTransaction(context.Context, *ProcessTransactionRequest) (*ProcessTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTransaction not implemented")
}
func (UnimplementedSnipingServiceServer) ProcessMeteoraEvent(context.Context, *ProcessMeteoraEventRequest) (*ProcessMeteoraEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessMeteoraEvent not implemented")
}
func (UnimplementedSnipingServiceServer) GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionHistory not implemented")
}
func (UnimplementedSnipingServiceServer) GetMeteoraPoolHistory(context.Context, *GetMeteoraPoolHistoryRequest) (*GetMeteoraPoolHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeteoraPoolHistory not implemented")
}
func (UnimplementedSnipingServiceServer) SubscribeToTransactions(*SubscribeRequest, grpc.ServerStreamingServer[TransactionEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToTransactions not implemented")
}
func (UnimplementedSnipingServiceServer) SubscribeToMeteoraEvents(*SubscribeRequest, grpc.ServerStreamingServer[MeteoraEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToMeteoraEvents not implemented")
}
func (UnimplementedSnipingServiceServer) GetHealthStatus(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthStatus not implemented")
}
func (UnimplementedSnipingServiceServer) mustEmbedUnimplementedSnipingServiceServer() {}
func (UnimplementedSnipingServiceServer) testEmbeddedByValue()                        {}

// UnsafeSnipingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnipingServiceServer will
// result in compilation errors.
type UnsafeSnipingServiceServer interface {
	mustEmbedUnimplementedSnipingServiceServer()
}

func RegisterSnipingServiceServer(s grpc.ServiceRegistrar, srv SnipingServiceServer) {
	// If the following call pancis, it indicates UnimplementedSnipingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SnipingService_ServiceDesc, srv)
}

func _SnipingService_ProcessTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipingServiceServer).ProcessTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnipingService_ProcessTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipingServiceServer).ProcessTransaction(ctx, req.(*ProcessTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipingService_ProcessMeteoraEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessMeteoraEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipingServiceServer).ProcessMeteoraEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnipingService_ProcessMeteoraEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipingServiceServer).ProcessMeteoraEvent(ctx, req.(*ProcessMeteoraEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipingService_GetTransactionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipingServiceServer).GetTransactionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnipingService_GetTransactionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipingServiceServer).GetTransactionHistory(ctx, req.(*GetTransactionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipingService_GetMeteoraPoolHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeteoraPoolHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipingServiceServer).GetMeteoraPoolHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnipingService_GetMeteoraPoolHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipingServiceServer).GetMeteoraPoolHistory(ctx, req.(*GetMeteoraPoolHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipingService_SubscribeToTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnipingServiceServer).SubscribeToTransactions(m, &grpc.GenericServerStream[SubscribeRequest, TransactionEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SnipingService_SubscribeToTransactionsServer = grpc.ServerStreamingServer[TransactionEvent]

func _SnipingService_SubscribeToMeteoraEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnipingServiceServer).SubscribeToMeteoraEvents(m, &grpc.GenericServerStream[SubscribeRequest, MeteoraEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SnipingService_SubscribeToMeteoraEventsServer = grpc.ServerStreamingServer[MeteoraEvent]

func _SnipingService_GetHealthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipingServiceServer).GetHealthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnipingService_GetHealthStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipingServiceServer).GetHealthStatus(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SnipingService_ServiceDesc is the grpc.ServiceDesc for SnipingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnipingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sniping.v1.SnipingService",
	HandlerType: (*SnipingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessTransaction",
			Handler:    _SnipingService_ProcessTransaction_Handler,
		},
		{
			MethodName: "ProcessMeteoraEvent",
			Handler:    _SnipingService_ProcessMeteoraEvent_Handler,
		},
		{
			MethodName: "GetTransactionHistory",
			Handler:    _SnipingService_GetTransactionHistory_Handler,
		},
		{
			MethodName: "GetMeteoraPoolHistory",
			Handler:    _SnipingService_GetMeteoraPoolHistory_Handler,
		},
		{
			MethodName: "GetHealthStatus",
			Handler:    _SnipingService_GetHealthStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToTransactions",
			Handler:       _SnipingService_SubscribeToTransactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToMeteoraEvents",
			Handler:       _SnipingService_SubscribeToMeteoraEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/sniping.proto",
}
