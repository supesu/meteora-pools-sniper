// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package usecase

import (
	"github.com/google/wire"
	"github.com/supesu/sniping-bot-v2/pkg/domain"
	"github.com/supesu/sniping-bot-v2/pkg/logger"
)

// Injectors from wire.go:

// ProcessTransactionUseCaseProvider provides process transaction use case
func ProcessTransactionUseCaseProvider(transactionRepo domain.TransactionRepository, eventPublisher domain.EventPublisher, log logger.Logger) *ProcessTransactionUseCase {
	processTransactionUseCase := NewProcessTransactionUseCase(transactionRepo, eventPublisher, log)
	return processTransactionUseCase
}

// GetTransactionHistoryUseCaseProvider provides get transaction history use case
func GetTransactionHistoryUseCaseProvider(transactionRepo domain.TransactionRepository, log logger.Logger) *GetTransactionHistoryUseCase {
	getTransactionHistoryUseCase := NewGetTransactionHistoryUseCase(transactionRepo, log)
	return getTransactionHistoryUseCase
}

// ManageSubscriptionsUseCaseProvider provides manage subscriptions use case
func ManageSubscriptionsUseCaseProvider(subscriptionRepo domain.SubscriptionRepository, eventPublisher domain.EventPublisher, log logger.Logger) *ManageSubscriptionsUseCase {
	manageSubscriptionsUseCase := NewManageSubscriptionsUseCase(subscriptionRepo, eventPublisher, log)
	return manageSubscriptionsUseCase
}

// NotifyTokenCreationUseCaseProvider provides notify token creation use case
func NotifyTokenCreationUseCaseProvider(discordRepo domain.DiscordNotificationRepository, log logger.Logger) *NotifyTokenCreationUseCase {
	notifyTokenCreationUseCase := NewNotifyTokenCreationUseCase(discordRepo, log)
	return notifyTokenCreationUseCase
}

// ProcessMeteoraEventUseCaseProvider provides process Meteora event use case
func ProcessMeteoraEventUseCaseProvider(meteoraRepo domain.MeteoraRepository, eventPublisher domain.EventPublisher, log logger.Logger) *ProcessMeteoraEventUseCase {
	processMeteoraEventUseCase := NewProcessMeteoraEventUseCase(meteoraRepo, eventPublisher, log)
	return processMeteoraEventUseCase
}

// NotifyMeteoraPoolCreationUseCaseProvider provides notify Meteora pool creation use case
func NotifyMeteoraPoolCreationUseCaseProvider(discordRepo domain.DiscordNotificationRepository, log logger.Logger) *NotifyMeteoraPoolCreationUseCase {
	notifyMeteoraPoolCreationUseCase := NewNotifyMeteoraPoolCreationUseCase(discordRepo, log)
	return notifyMeteoraPoolCreationUseCase
}

// wire.go:

// UseCaseSet provides all use case implementations
var UseCaseSet = wire.NewSet(
	NewProcessTransactionUseCase,
	NewGetTransactionHistoryUseCase,
	NewManageSubscriptionsUseCase,
	NewNotifyTokenCreationUseCase,
	NewProcessMeteoraEventUseCase,
	NewNotifyMeteoraPoolCreationUseCase,
)
