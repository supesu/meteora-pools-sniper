// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=pkg/domain/interfaces.go -destination=internal/mocks/usecase_mocks.go -package=mocks ProcessTransactionUseCaseInterface GetTransactionHistoryUseCaseInterface ManageSubscriptionsUseCaseInterface NotifyTokenCreationUseCaseInterface ProcessMeteoraEventUseCaseInterface NotifyMeteoraPoolCreationUseCaseInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/supesu/sniping-bot-v2/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockProcessTransactionUseCaseInterface is a mock of ProcessTransactionUseCaseInterface interface.
type MockProcessTransactionUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProcessTransactionUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockProcessTransactionUseCaseInterfaceMockRecorder is the mock recorder for MockProcessTransactionUseCaseInterface.
type MockProcessTransactionUseCaseInterfaceMockRecorder struct {
	mock *MockProcessTransactionUseCaseInterface
}

// NewMockProcessTransactionUseCaseInterface creates a new mock instance.
func NewMockProcessTransactionUseCaseInterface(ctrl *gomock.Controller) *MockProcessTransactionUseCaseInterface {
	mock := &MockProcessTransactionUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockProcessTransactionUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessTransactionUseCaseInterface) EXPECT() *MockProcessTransactionUseCaseInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockProcessTransactionUseCaseInterface) Execute(ctx context.Context, command *domain.ProcessTransactionCommand) (*domain.ProcessTransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, command)
	ret0, _ := ret[0].(*domain.ProcessTransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockProcessTransactionUseCaseInterfaceMockRecorder) Execute(ctx, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockProcessTransactionUseCaseInterface)(nil).Execute), ctx, command)
}

// MockGetTransactionHistoryUseCaseInterface is a mock of GetTransactionHistoryUseCaseInterface interface.
type MockGetTransactionHistoryUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGetTransactionHistoryUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockGetTransactionHistoryUseCaseInterfaceMockRecorder is the mock recorder for MockGetTransactionHistoryUseCaseInterface.
type MockGetTransactionHistoryUseCaseInterfaceMockRecorder struct {
	mock *MockGetTransactionHistoryUseCaseInterface
}

// NewMockGetTransactionHistoryUseCaseInterface creates a new mock instance.
func NewMockGetTransactionHistoryUseCaseInterface(ctrl *gomock.Controller) *MockGetTransactionHistoryUseCaseInterface {
	mock := &MockGetTransactionHistoryUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockGetTransactionHistoryUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetTransactionHistoryUseCaseInterface) EXPECT() *MockGetTransactionHistoryUseCaseInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetTransactionHistoryUseCaseInterface) Execute(ctx context.Context, query any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, query)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetTransactionHistoryUseCaseInterfaceMockRecorder) Execute(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetTransactionHistoryUseCaseInterface)(nil).Execute), ctx, query)
}

// MockManageSubscriptionsUseCaseInterface is a mock of ManageSubscriptionsUseCaseInterface interface.
type MockManageSubscriptionsUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockManageSubscriptionsUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockManageSubscriptionsUseCaseInterfaceMockRecorder is the mock recorder for MockManageSubscriptionsUseCaseInterface.
type MockManageSubscriptionsUseCaseInterfaceMockRecorder struct {
	mock *MockManageSubscriptionsUseCaseInterface
}

// NewMockManageSubscriptionsUseCaseInterface creates a new mock instance.
func NewMockManageSubscriptionsUseCaseInterface(ctrl *gomock.Controller) *MockManageSubscriptionsUseCaseInterface {
	mock := &MockManageSubscriptionsUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockManageSubscriptionsUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManageSubscriptionsUseCaseInterface) EXPECT() *MockManageSubscriptionsUseCaseInterfaceMockRecorder {
	return m.recorder
}

// GetSubscribers mocks base method.
func (m *MockManageSubscriptionsUseCaseInterface) GetSubscribers(ctx context.Context, query any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribers", ctx, query)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribers indicates an expected call of GetSubscribers.
func (mr *MockManageSubscriptionsUseCaseInterfaceMockRecorder) GetSubscribers(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribers", reflect.TypeOf((*MockManageSubscriptionsUseCaseInterface)(nil).GetSubscribers), ctx, query)
}

// Subscribe mocks base method.
func (m *MockManageSubscriptionsUseCaseInterface) Subscribe(ctx context.Context, cmd any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, cmd)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockManageSubscriptionsUseCaseInterfaceMockRecorder) Subscribe(ctx, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockManageSubscriptionsUseCaseInterface)(nil).Subscribe), ctx, cmd)
}

// Unsubscribe mocks base method.
func (m *MockManageSubscriptionsUseCaseInterface) Unsubscribe(ctx context.Context, cmd any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", ctx, cmd)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockManageSubscriptionsUseCaseInterfaceMockRecorder) Unsubscribe(ctx, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockManageSubscriptionsUseCaseInterface)(nil).Unsubscribe), ctx, cmd)
}

// MockNotifyTokenCreationUseCaseInterface is a mock of NotifyTokenCreationUseCaseInterface interface.
type MockNotifyTokenCreationUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyTokenCreationUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockNotifyTokenCreationUseCaseInterfaceMockRecorder is the mock recorder for MockNotifyTokenCreationUseCaseInterface.
type MockNotifyTokenCreationUseCaseInterfaceMockRecorder struct {
	mock *MockNotifyTokenCreationUseCaseInterface
}

// NewMockNotifyTokenCreationUseCaseInterface creates a new mock instance.
func NewMockNotifyTokenCreationUseCaseInterface(ctrl *gomock.Controller) *MockNotifyTokenCreationUseCaseInterface {
	mock := &MockNotifyTokenCreationUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockNotifyTokenCreationUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifyTokenCreationUseCaseInterface) EXPECT() *MockNotifyTokenCreationUseCaseInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockNotifyTokenCreationUseCaseInterface) Execute(ctx context.Context, command any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, command)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockNotifyTokenCreationUseCaseInterfaceMockRecorder) Execute(ctx, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockNotifyTokenCreationUseCaseInterface)(nil).Execute), ctx, command)
}

// MockProcessMeteoraEventUseCaseInterface is a mock of ProcessMeteoraEventUseCaseInterface interface.
type MockProcessMeteoraEventUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProcessMeteoraEventUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockProcessMeteoraEventUseCaseInterfaceMockRecorder is the mock recorder for MockProcessMeteoraEventUseCaseInterface.
type MockProcessMeteoraEventUseCaseInterfaceMockRecorder struct {
	mock *MockProcessMeteoraEventUseCaseInterface
}

// NewMockProcessMeteoraEventUseCaseInterface creates a new mock instance.
func NewMockProcessMeteoraEventUseCaseInterface(ctrl *gomock.Controller) *MockProcessMeteoraEventUseCaseInterface {
	mock := &MockProcessMeteoraEventUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockProcessMeteoraEventUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessMeteoraEventUseCaseInterface) EXPECT() *MockProcessMeteoraEventUseCaseInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockProcessMeteoraEventUseCaseInterface) Execute(ctx context.Context, command any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, command)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockProcessMeteoraEventUseCaseInterfaceMockRecorder) Execute(ctx, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockProcessMeteoraEventUseCaseInterface)(nil).Execute), ctx, command)
}

// MockNotifyMeteoraPoolCreationUseCaseInterface is a mock of NotifyMeteoraPoolCreationUseCaseInterface interface.
type MockNotifyMeteoraPoolCreationUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyMeteoraPoolCreationUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockNotifyMeteoraPoolCreationUseCaseInterfaceMockRecorder is the mock recorder for MockNotifyMeteoraPoolCreationUseCaseInterface.
type MockNotifyMeteoraPoolCreationUseCaseInterfaceMockRecorder struct {
	mock *MockNotifyMeteoraPoolCreationUseCaseInterface
}

// NewMockNotifyMeteoraPoolCreationUseCaseInterface creates a new mock instance.
func NewMockNotifyMeteoraPoolCreationUseCaseInterface(ctrl *gomock.Controller) *MockNotifyMeteoraPoolCreationUseCaseInterface {
	mock := &MockNotifyMeteoraPoolCreationUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockNotifyMeteoraPoolCreationUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifyMeteoraPoolCreationUseCaseInterface) EXPECT() *MockNotifyMeteoraPoolCreationUseCaseInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockNotifyMeteoraPoolCreationUseCaseInterface) Execute(ctx context.Context, command any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, command)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockNotifyMeteoraPoolCreationUseCaseInterfaceMockRecorder) Execute(ctx, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockNotifyMeteoraPoolCreationUseCaseInterface)(nil).Execute), ctx, command)
}
