// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapters/solana/meteora_scanner.go
//
// Generated by this command:
//
//	mockgen -source=internal/adapters/solana/meteora_scanner.go -destination=internal/mocks/mocks.go -package=mocks SolanaClientInterface GRPCPublisherInterface TransactionProcessorInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	solana "github.com/gagliardetto/solana-go"
	rpc "github.com/gagliardetto/solana-go/rpc"
	domain "github.com/supesu/sniping-bot-v2/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockSolanaClientInterface is a mock of SolanaClientInterface interface.
type MockSolanaClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSolanaClientInterfaceMockRecorder
	isgomock struct{}
}

// MockSolanaClientInterfaceMockRecorder is the mock recorder for MockSolanaClientInterface.
type MockSolanaClientInterfaceMockRecorder struct {
	mock *MockSolanaClientInterface
}

// NewMockSolanaClientInterface creates a new mock instance.
func NewMockSolanaClientInterface(ctrl *gomock.Controller) *MockSolanaClientInterface {
	mock := &MockSolanaClientInterface{ctrl: ctrl}
	mock.recorder = &MockSolanaClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSolanaClientInterface) EXPECT() *MockSolanaClientInterfaceMockRecorder {
	return m.recorder
}

// ConnectRPC mocks base method.
func (m *MockSolanaClientInterface) ConnectRPC() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectRPC")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectRPC indicates an expected call of ConnectRPC.
func (mr *MockSolanaClientInterfaceMockRecorder) ConnectRPC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectRPC", reflect.TypeOf((*MockSolanaClientInterface)(nil).ConnectRPC))
}

// ConnectWebSocket mocks base method.
func (m *MockSolanaClientInterface) ConnectWebSocket() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectWebSocket")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectWebSocket indicates an expected call of ConnectWebSocket.
func (mr *MockSolanaClientInterfaceMockRecorder) ConnectWebSocket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectWebSocket", reflect.TypeOf((*MockSolanaClientInterface)(nil).ConnectWebSocket))
}

// GetRPCClient mocks base method.
func (m *MockSolanaClientInterface) GetRPCClient() *rpc.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRPCClient")
	ret0, _ := ret[0].(*rpc.Client)
	return ret0
}

// GetRPCClient indicates an expected call of GetRPCClient.
func (mr *MockSolanaClientInterfaceMockRecorder) GetRPCClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRPCClient", reflect.TypeOf((*MockSolanaClientInterface)(nil).GetRPCClient))
}

// ReadWebSocketMessage mocks base method.
func (m *MockSolanaClientInterface) ReadWebSocketMessage() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWebSocketMessage")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWebSocketMessage indicates an expected call of ReadWebSocketMessage.
func (mr *MockSolanaClientInterfaceMockRecorder) ReadWebSocketMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWebSocketMessage", reflect.TypeOf((*MockSolanaClientInterface)(nil).ReadWebSocketMessage))
}

// Stop mocks base method.
func (m *MockSolanaClientInterface) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockSolanaClientInterfaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSolanaClientInterface)(nil).Stop))
}

// SubscribeToProgramLogs mocks base method.
func (m *MockSolanaClientInterface) SubscribeToProgramLogs(programID solana.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToProgramLogs", programID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToProgramLogs indicates an expected call of SubscribeToProgramLogs.
func (mr *MockSolanaClientInterfaceMockRecorder) SubscribeToProgramLogs(programID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToProgramLogs", reflect.TypeOf((*MockSolanaClientInterface)(nil).SubscribeToProgramLogs), programID)
}

// MockGRPCPublisherInterface is a mock of GRPCPublisherInterface interface.
type MockGRPCPublisherInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCPublisherInterfaceMockRecorder
	isgomock struct{}
}

// MockGRPCPublisherInterfaceMockRecorder is the mock recorder for MockGRPCPublisherInterface.
type MockGRPCPublisherInterfaceMockRecorder struct {
	mock *MockGRPCPublisherInterface
}

// NewMockGRPCPublisherInterface creates a new mock instance.
func NewMockGRPCPublisherInterface(ctrl *gomock.Controller) *MockGRPCPublisherInterface {
	mock := &MockGRPCPublisherInterface{ctrl: ctrl}
	mock.recorder = &MockGRPCPublisherInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCPublisherInterface) EXPECT() *MockGRPCPublisherInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockGRPCPublisherInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockGRPCPublisherInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGRPCPublisherInterface)(nil).Close))
}

// Connect mocks base method.
func (m *MockGRPCPublisherInterface) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockGRPCPublisherInterfaceMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockGRPCPublisherInterface)(nil).Connect))
}

// IsConnected mocks base method.
func (m *MockGRPCPublisherInterface) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected.
func (mr *MockGRPCPublisherInterfaceMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockGRPCPublisherInterface)(nil).IsConnected))
}

// PublishMeteoraEvent mocks base method.
func (m *MockGRPCPublisherInterface) PublishMeteoraEvent(ctx context.Context, event *domain.MeteoraPoolEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMeteoraEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMeteoraEvent indicates an expected call of PublishMeteoraEvent.
func (mr *MockGRPCPublisherInterfaceMockRecorder) PublishMeteoraEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMeteoraEvent", reflect.TypeOf((*MockGRPCPublisherInterface)(nil).PublishMeteoraEvent), ctx, event)
}

// MockTransactionProcessorInterface is a mock of TransactionProcessorInterface interface.
type MockTransactionProcessorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionProcessorInterfaceMockRecorder
	isgomock struct{}
}

// MockTransactionProcessorInterfaceMockRecorder is the mock recorder for MockTransactionProcessorInterface.
type MockTransactionProcessorInterfaceMockRecorder struct {
	mock *MockTransactionProcessorInterface
}

// NewMockTransactionProcessorInterface creates a new mock instance.
func NewMockTransactionProcessorInterface(ctrl *gomock.Controller) *MockTransactionProcessorInterface {
	mock := &MockTransactionProcessorInterface{ctrl: ctrl}
	mock.recorder = &MockTransactionProcessorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionProcessorInterface) EXPECT() *MockTransactionProcessorInterfaceMockRecorder {
	return m.recorder
}

// IsPoolCreationLog mocks base method.
func (m *MockTransactionProcessorInterface) IsPoolCreationLog(log string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPoolCreationLog", log)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPoolCreationLog indicates an expected call of IsPoolCreationLog.
func (mr *MockTransactionProcessorInterfaceMockRecorder) IsPoolCreationLog(log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPoolCreationLog", reflect.TypeOf((*MockTransactionProcessorInterface)(nil).IsPoolCreationLog), log)
}

// ProcessTransactionBySignature mocks base method.
func (m *MockTransactionProcessorInterface) ProcessTransactionBySignature(ctx context.Context, rpcClient any, signature solana.Signature, slot uint64) (*domain.MeteoraPoolEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTransactionBySignature", ctx, rpcClient, signature, slot)
	ret0, _ := ret[0].(*domain.MeteoraPoolEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessTransactionBySignature indicates an expected call of ProcessTransactionBySignature.
func (mr *MockTransactionProcessorInterfaceMockRecorder) ProcessTransactionBySignature(ctx, rpcClient, signature, slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTransactionBySignature", reflect.TypeOf((*MockTransactionProcessorInterface)(nil).ProcessTransactionBySignature), ctx, rpcClient, signature, slot)
}
