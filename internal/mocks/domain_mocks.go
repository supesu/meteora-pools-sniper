// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository.go
//
// Generated by this command:
//
//	mockgen -source=pkg/domain/repository.go -destination=internal/mocks/domain_mocks.go -package=mocks TransactionRepository SubscriptionRepository MeteoraRepository EventPublisher
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/supesu/sniping-bot-v2/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
	isgomock struct{}
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockTransactionRepository) Count(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockTransactionRepositoryMockRecorder) Count(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockTransactionRepository)(nil).Count), ctx)
}

// CountByProgram mocks base method.
func (m *MockTransactionRepository) CountByProgram(ctx context.Context, programID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByProgram", ctx, programID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByProgram indicates an expected call of CountByProgram.
func (mr *MockTransactionRepositoryMockRecorder) CountByProgram(ctx, programID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByProgram", reflect.TypeOf((*MockTransactionRepository)(nil).CountByProgram), ctx, programID)
}

// Delete mocks base method.
func (m *MockTransactionRepository) Delete(ctx context.Context, signature string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTransactionRepositoryMockRecorder) Delete(ctx, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTransactionRepository)(nil).Delete), ctx, signature)
}

// FindByProgram mocks base method.
func (m *MockTransactionRepository) FindByProgram(ctx context.Context, programID string, opts domain.QueryOptions) ([]*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByProgram", ctx, programID, opts)
	ret0, _ := ret[0].([]*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByProgram indicates an expected call of FindByProgram.
func (mr *MockTransactionRepositoryMockRecorder) FindByProgram(ctx, programID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByProgram", reflect.TypeOf((*MockTransactionRepository)(nil).FindByProgram), ctx, programID, opts)
}

// FindBySignature mocks base method.
func (m *MockTransactionRepository) FindBySignature(ctx context.Context, signature string) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySignature", ctx, signature)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySignature indicates an expected call of FindBySignature.
func (mr *MockTransactionRepositoryMockRecorder) FindBySignature(ctx, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySignature", reflect.TypeOf((*MockTransactionRepository)(nil).FindBySignature), ctx, signature)
}

// FindByTimeRange mocks base method.
func (m *MockTransactionRepository) FindByTimeRange(ctx context.Context, start, end time.Time, opts domain.QueryOptions) ([]*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTimeRange", ctx, start, end, opts)
	ret0, _ := ret[0].([]*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTimeRange indicates an expected call of FindByTimeRange.
func (mr *MockTransactionRepositoryMockRecorder) FindByTimeRange(ctx, start, end, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTimeRange", reflect.TypeOf((*MockTransactionRepository)(nil).FindByTimeRange), ctx, start, end, opts)
}

// Store mocks base method.
func (m *MockTransactionRepository) Store(ctx context.Context, tx *domain.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockTransactionRepositoryMockRecorder) Store(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockTransactionRepository)(nil).Store), ctx, tx)
}

// Update mocks base method.
func (m *MockTransactionRepository) Update(ctx context.Context, tx *domain.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTransactionRepositoryMockRecorder) Update(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransactionRepository)(nil).Update), ctx, tx)
}

// MockSubscriptionRepository is a mock of SubscriptionRepository interface.
type MockSubscriptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepositoryMockRecorder
	isgomock struct{}
}

// MockSubscriptionRepositoryMockRecorder is the mock recorder for MockSubscriptionRepository.
type MockSubscriptionRepositoryMockRecorder struct {
	mock *MockSubscriptionRepository
}

// NewMockSubscriptionRepository creates a new mock instance.
func NewMockSubscriptionRepository(ctrl *gomock.Controller) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepositoryMockRecorder {
	return m.recorder
}

// GetSubscribers mocks base method.
func (m *MockSubscriptionRepository) GetSubscribers(ctx context.Context, programID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribers", ctx, programID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribers indicates an expected call of GetSubscribers.
func (mr *MockSubscriptionRepositoryMockRecorder) GetSubscribers(ctx, programID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribers", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetSubscribers), ctx, programID)
}

// GetSubscriptions mocks base method.
func (m *MockSubscriptionRepository) GetSubscriptions(ctx context.Context) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptions", ctx)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptions indicates an expected call of GetSubscriptions.
func (mr *MockSubscriptionRepositoryMockRecorder) GetSubscriptions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptions", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetSubscriptions), ctx)
}

// Subscribe mocks base method.
func (m *MockSubscriptionRepository) Subscribe(ctx context.Context, clientID string, programIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, clientID, programIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscriptionRepositoryMockRecorder) Subscribe(ctx, clientID, programIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscriptionRepository)(nil).Subscribe), ctx, clientID, programIDs)
}

// Unsubscribe mocks base method.
func (m *MockSubscriptionRepository) Unsubscribe(ctx context.Context, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", ctx, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSubscriptionRepositoryMockRecorder) Unsubscribe(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSubscriptionRepository)(nil).Unsubscribe), ctx, clientID)
}

// MockEventPublisher is a mock of EventPublisher interface.
type MockEventPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockEventPublisherMockRecorder
	isgomock struct{}
}

// MockEventPublisherMockRecorder is the mock recorder for MockEventPublisher.
type MockEventPublisherMockRecorder struct {
	mock *MockEventPublisher
}

// NewMockEventPublisher creates a new mock instance.
func NewMockEventPublisher(ctrl *gomock.Controller) *MockEventPublisher {
	mock := &MockEventPublisher{ctrl: ctrl}
	mock.recorder = &MockEventPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventPublisher) EXPECT() *MockEventPublisherMockRecorder {
	return m.recorder
}

// PublishMeteoraLiquidityAdded mocks base method.
func (m *MockEventPublisher) PublishMeteoraLiquidityAdded(ctx context.Context, event *domain.MeteoraPoolEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMeteoraLiquidityAdded", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMeteoraLiquidityAdded indicates an expected call of PublishMeteoraLiquidityAdded.
func (mr *MockEventPublisherMockRecorder) PublishMeteoraLiquidityAdded(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMeteoraLiquidityAdded", reflect.TypeOf((*MockEventPublisher)(nil).PublishMeteoraLiquidityAdded), ctx, event)
}

// PublishMeteoraPoolCreated mocks base method.
func (m *MockEventPublisher) PublishMeteoraPoolCreated(ctx context.Context, event *domain.MeteoraPoolEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMeteoraPoolCreated", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMeteoraPoolCreated indicates an expected call of PublishMeteoraPoolCreated.
func (mr *MockEventPublisherMockRecorder) PublishMeteoraPoolCreated(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMeteoraPoolCreated", reflect.TypeOf((*MockEventPublisher)(nil).PublishMeteoraPoolCreated), ctx, event)
}

// PublishTransactionFailed mocks base method.
func (m *MockEventPublisher) PublishTransactionFailed(ctx context.Context, signature, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTransactionFailed", ctx, signature, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTransactionFailed indicates an expected call of PublishTransactionFailed.
func (mr *MockEventPublisherMockRecorder) PublishTransactionFailed(ctx, signature, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTransactionFailed", reflect.TypeOf((*MockEventPublisher)(nil).PublishTransactionFailed), ctx, signature, reason)
}

// PublishTransactionProcessed mocks base method.
func (m *MockEventPublisher) PublishTransactionProcessed(ctx context.Context, tx *domain.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTransactionProcessed", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTransactionProcessed indicates an expected call of PublishTransactionProcessed.
func (mr *MockEventPublisherMockRecorder) PublishTransactionProcessed(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTransactionProcessed", reflect.TypeOf((*MockEventPublisher)(nil).PublishTransactionProcessed), ctx, tx)
}

// Subscribe mocks base method.
func (m *MockEventPublisher) Subscribe(ctx context.Context, eventType string, handler domain.EventHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, eventType, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockEventPublisherMockRecorder) Subscribe(ctx, eventType, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockEventPublisher)(nil).Subscribe), ctx, eventType, handler)
}

// MockMeteoraRepository is a mock of MeteoraRepository interface.
type MockMeteoraRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMeteoraRepositoryMockRecorder
	isgomock struct{}
}

// MockMeteoraRepositoryMockRecorder is the mock recorder for MockMeteoraRepository.
type MockMeteoraRepositoryMockRecorder struct {
	mock *MockMeteoraRepository
}

// NewMockMeteoraRepository creates a new mock instance.
func NewMockMeteoraRepository(ctrl *gomock.Controller) *MockMeteoraRepository {
	mock := &MockMeteoraRepository{ctrl: ctrl}
	mock.recorder = &MockMeteoraRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeteoraRepository) EXPECT() *MockMeteoraRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockMeteoraRepository) Count(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockMeteoraRepositoryMockRecorder) Count(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockMeteoraRepository)(nil).Count), ctx)
}

// Delete mocks base method.
func (m *MockMeteoraRepository) Delete(ctx context.Context, poolAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, poolAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMeteoraRepositoryMockRecorder) Delete(ctx, poolAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMeteoraRepository)(nil).Delete), ctx, poolAddress)
}

// FindPoolByAddress mocks base method.
func (m *MockMeteoraRepository) FindPoolByAddress(ctx context.Context, poolAddress string) (*domain.MeteoraPoolInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPoolByAddress", ctx, poolAddress)
	ret0, _ := ret[0].(*domain.MeteoraPoolInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPoolByAddress indicates an expected call of FindPoolByAddress.
func (mr *MockMeteoraRepositoryMockRecorder) FindPoolByAddress(ctx, poolAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPoolByAddress", reflect.TypeOf((*MockMeteoraRepository)(nil).FindPoolByAddress), ctx, poolAddress)
}

// FindPoolsByCreator mocks base method.
func (m *MockMeteoraRepository) FindPoolsByCreator(ctx context.Context, creatorWallet string) ([]*domain.MeteoraPoolInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPoolsByCreator", ctx, creatorWallet)
	ret0, _ := ret[0].([]*domain.MeteoraPoolInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPoolsByCreator indicates an expected call of FindPoolsByCreator.
func (mr *MockMeteoraRepositoryMockRecorder) FindPoolsByCreator(ctx, creatorWallet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPoolsByCreator", reflect.TypeOf((*MockMeteoraRepository)(nil).FindPoolsByCreator), ctx, creatorWallet)
}

// FindPoolsByTokenPair mocks base method.
func (m *MockMeteoraRepository) FindPoolsByTokenPair(ctx context.Context, tokenA, tokenB string) ([]*domain.MeteoraPoolInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPoolsByTokenPair", ctx, tokenA, tokenB)
	ret0, _ := ret[0].([]*domain.MeteoraPoolInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPoolsByTokenPair indicates an expected call of FindPoolsByTokenPair.
func (mr *MockMeteoraRepositoryMockRecorder) FindPoolsByTokenPair(ctx, tokenA, tokenB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPoolsByTokenPair", reflect.TypeOf((*MockMeteoraRepository)(nil).FindPoolsByTokenPair), ctx, tokenA, tokenB)
}

// GetRecentPools mocks base method.
func (m *MockMeteoraRepository) GetRecentPools(ctx context.Context, limit, offset int) ([]*domain.MeteoraPoolInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentPools", ctx, limit, offset)
	ret0, _ := ret[0].([]*domain.MeteoraPoolInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentPools indicates an expected call of GetRecentPools.
func (mr *MockMeteoraRepositoryMockRecorder) GetRecentPools(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentPools", reflect.TypeOf((*MockMeteoraRepository)(nil).GetRecentPools), ctx, limit, offset)
}

// StorePool mocks base method.
func (m *MockMeteoraRepository) StorePool(ctx context.Context, pool *domain.MeteoraPoolInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePool", ctx, pool)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorePool indicates an expected call of StorePool.
func (mr *MockMeteoraRepositoryMockRecorder) StorePool(ctx, pool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePool", reflect.TypeOf((*MockMeteoraRepository)(nil).StorePool), ctx, pool)
}

// UpdatePool mocks base method.
func (m *MockMeteoraRepository) UpdatePool(ctx context.Context, pool *domain.MeteoraPoolInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePool", ctx, pool)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePool indicates an expected call of UpdatePool.
func (mr *MockMeteoraRepositoryMockRecorder) UpdatePool(ctx, pool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePool", reflect.TypeOf((*MockMeteoraRepository)(nil).UpdatePool), ctx, pool)
}

// MockDiscordNotificationRepository is a mock of DiscordNotificationRepository interface.
type MockDiscordNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDiscordNotificationRepositoryMockRecorder
	isgomock struct{}
}

// MockDiscordNotificationRepositoryMockRecorder is the mock recorder for MockDiscordNotificationRepository.
type MockDiscordNotificationRepositoryMockRecorder struct {
	mock *MockDiscordNotificationRepository
}

// NewMockDiscordNotificationRepository creates a new mock instance.
func NewMockDiscordNotificationRepository(ctrl *gomock.Controller) *MockDiscordNotificationRepository {
	mock := &MockDiscordNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockDiscordNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscordNotificationRepository) EXPECT() *MockDiscordNotificationRepositoryMockRecorder {
	return m.recorder
}

// IsHealthy mocks base method.
func (m *MockDiscordNotificationRepository) IsHealthy(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHealthy", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsHealthy indicates an expected call of IsHealthy.
func (mr *MockDiscordNotificationRepositoryMockRecorder) IsHealthy(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHealthy", reflect.TypeOf((*MockDiscordNotificationRepository)(nil).IsHealthy), ctx)
}

// SendMeteoraPoolNotification mocks base method.
func (m *MockDiscordNotificationRepository) SendMeteoraPoolNotification(ctx context.Context, event *domain.MeteoraPoolEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMeteoraPoolNotification", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMeteoraPoolNotification indicates an expected call of SendMeteoraPoolNotification.
func (mr *MockDiscordNotificationRepositoryMockRecorder) SendMeteoraPoolNotification(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMeteoraPoolNotification", reflect.TypeOf((*MockDiscordNotificationRepository)(nil).SendMeteoraPoolNotification), ctx, event)
}

// SendTokenCreationNotification mocks base method.
func (m *MockDiscordNotificationRepository) SendTokenCreationNotification(ctx context.Context, event *domain.TokenCreationEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTokenCreationNotification", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTokenCreationNotification indicates an expected call of SendTokenCreationNotification.
func (mr *MockDiscordNotificationRepositoryMockRecorder) SendTokenCreationNotification(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTokenCreationNotification", reflect.TypeOf((*MockDiscordNotificationRepository)(nil).SendTokenCreationNotification), ctx, event)
}

// SendTransactionNotification mocks base method.
func (m *MockDiscordNotificationRepository) SendTransactionNotification(ctx context.Context, tx *domain.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransactionNotification", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTransactionNotification indicates an expected call of SendTransactionNotification.
func (mr *MockDiscordNotificationRepositoryMockRecorder) SendTransactionNotification(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransactionNotification", reflect.TypeOf((*MockDiscordNotificationRepository)(nil).SendTransactionNotification), ctx, tx)
}

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
	isgomock struct{}
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockEventHandler) Handle(ctx context.Context, event domain.DomainEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockEventHandlerMockRecorder) Handle(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockEventHandler)(nil).Handle), ctx, event)
}

// MockDomainEvent is a mock of DomainEvent interface.
type MockDomainEvent struct {
	ctrl     *gomock.Controller
	recorder *MockDomainEventMockRecorder
	isgomock struct{}
}

// MockDomainEventMockRecorder is the mock recorder for MockDomainEvent.
type MockDomainEventMockRecorder struct {
	mock *MockDomainEvent
}

// NewMockDomainEvent creates a new mock instance.
func NewMockDomainEvent(ctrl *gomock.Controller) *MockDomainEvent {
	mock := &MockDomainEvent{ctrl: ctrl}
	mock.recorder = &MockDomainEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainEvent) EXPECT() *MockDomainEventMockRecorder {
	return m.recorder
}

// AggregateID mocks base method.
func (m *MockDomainEvent) AggregateID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateID")
	ret0, _ := ret[0].(string)
	return ret0
}

// AggregateID indicates an expected call of AggregateID.
func (mr *MockDomainEventMockRecorder) AggregateID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateID", reflect.TypeOf((*MockDomainEvent)(nil).AggregateID))
}

// EventType mocks base method.
func (m *MockDomainEvent) EventType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventType")
	ret0, _ := ret[0].(string)
	return ret0
}

// EventType indicates an expected call of EventType.
func (mr *MockDomainEventMockRecorder) EventType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventType", reflect.TypeOf((*MockDomainEvent)(nil).EventType))
}

// OccurredAt mocks base method.
func (m *MockDomainEvent) OccurredAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OccurredAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// OccurredAt indicates an expected call of OccurredAt.
func (mr *MockDomainEventMockRecorder) OccurredAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OccurredAt", reflect.TypeOf((*MockDomainEvent)(nil).OccurredAt))
}
